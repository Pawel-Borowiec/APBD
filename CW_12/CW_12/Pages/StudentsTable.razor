@page "/students/{PageId:int}"
@using CW_12.Models
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime


<h1>Students</h1>
<button @onclick="AddNewStudent" class="btn btn-primary">Add new Students</button>
<table id="students-table">
    <tr>
        <th>Avatar</th>
        <th><span @onclick="@(() => SortTable("FirstName"))" class="sort-link">First Name</span></th>
        <th><span @onclick="@(() => SortTable("LastName"))" class="sort-link">Last Name</span></th>
        <th><span @onclick="@(() => SortTable("BirthDate"))" class="sort-link">Birth-Date</span></th>
        <th><span @onclick="@(() => SortTable("Studies"))" class="sort-link">Studies</span></th>
    </tr>
    @foreach (var s in Students)
    {
        <tr>
            <td>
                <img src="@s.Avatar" width="100px" height="100px" />
            </td>
            <td>
                @s.FirstName
            </td>
            <td>
                @s.LastName
            </td>
            <td>
                @s.BirthDate.Day/@s.BirthDate.Month/@s.BirthDate.Year
            </td>
            <td>
                @s.Studies
            </td>
            <button @onclick="@(() => DeleteStudent(s))" class="btn btn-delete">Delete</button>
        </tr>
    }
</table>
<div class="pagination">
    <a href="#">&laquo;</a>
    @for(int i=0;i<(Students.Count/7)+1;i++)
    {
        <a href="students/@(i+1)">@(i+1)</a>
    }
    <a href="#">&raquo;</a>
</div>

@code {
    [Parameter]
    public int PageId { get; set; }

    MyDbContext _context;
    private List<Student> Students = new List<Student>();
    bool isAscending = false;

    protected override void OnInitialized()
    {

        _context = new MyDbContext();
        Students = _context.Students.ToList();


    }

    private async Task DeleteStudent(Student toRemove)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the student {toRemove.FirstName} {toRemove.LastName} from list?"))
            return;
        Students.Remove(toRemove);
        _context = new MyDbContext();
        _context.Students.Remove(toRemove);
        _context.SaveChanges();
        
    }

    private async Task AddNewStudent()
    {
        navigationManager.NavigateTo("/addnewstudent");
    }
    private async Task SortTable(string parameter)
    {
        if (!isAscending)
        {
            isAscending = true;
            Students = Students.OrderBy(x => x.GetType().GetProperty(parameter).GetValue(x, null)).ToList();
        }
        else
        {
            isAscending = false;
            Students = Students.OrderByDescending(x => x.GetType().GetProperty(parameter).GetValue(x, null)).ToList();
        }
    }

}
